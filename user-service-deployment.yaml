apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  labels:
    app: user-service
spec:
  replicas: 2 # numero de pods a crear en el cluster kubernetes para este despliegue de la aplicacion user-service
  selector:
    matchLabels:
      app: user-service # debe coincidir con las etiquetas del template
  template:
    metadata:
      labels:
        app: user-service # debe coincidir con las etiquetas del selector
    spec:
      containers:
      - name: user-service
        image: user-service:1.0.0 # nombre de la imagen docker que se va a usar para crear los contenedores
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8081 # puerto en el que la aplicacion escucha dentro del contenedor
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/users
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/users
            port: 8081
          initialDelaySeconds: 20
          periodSeconds: 5
---
apiVersion: v1
kind: Service # tipo de recurso que expone la aplicacion user-service dentro del cluster kubernetes , punto de acceso para acceder a los pods
metadata:
  name: user-service
spec:
  selector:
    app: user-service # Le indica al servicio que dirija el trafico a los pods con la etiqueta app=user-service
  ports:
  - protocol: TCP
    port: 8081
    targetPort: 8081
  type: ClusterIP # tipo de servicio que crea una IP interna en el cluster para que otros servicios puedan acceder a este servicio